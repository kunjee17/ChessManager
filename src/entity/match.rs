//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.0
use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};
#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "match")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    pub tournament_id: i32,
    pub round: i32,
    pub white_player_id: i32,
    pub black_player_id: i32,
    pub result: String,
    pub pgn: String,
    pub white_time_left: i32,
    pub black_time_left: i32,
    pub created_at: DateTimeUtc,
    pub updated_at: DateTimeUtc,
}
#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::player::Entity",
        from = "Column::BlackPlayerId",
        to = "super::player::Column::Id",
        on_update = "NoAction",
        on_delete = "Cascade"
    )]
    Player2,
    #[sea_orm(
        belongs_to = "super::player::Entity",
        from = "Column::WhitePlayerId",
        to = "super::player::Column::Id",
        on_update = "NoAction",
        on_delete = "Cascade"
    )]
    Player1,
    #[sea_orm(
        belongs_to = "super::tournament::Entity",
        from = "Column::TournamentId",
        to = "super::tournament::Column::Id",
        on_update = "NoAction",
        on_delete = "Cascade"
    )]
    Tournament,
}
impl Related<super::tournament::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Tournament.def()
    }
}
impl ActiveModelBehavior for ActiveModel {}
