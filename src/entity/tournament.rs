//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.0
use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};
#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "tournament")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    pub name: String,
    pub description: String,
    pub start_date: DateTimeUtc,
    pub end_date: DateTimeUtc,
    pub total_rounds: i32,
    pub current_round: i32,
    #[sea_orm(column_type = "custom(\"enum_text\")")]
    pub status: String,
    pub max_players: i32,
    pub current_players: i32,
    pub time_control: String,
    pub format: String,
    pub tiebreak_methods: String,
    pub color_allocation: String,
    pub pairing_algorithm: String,
    pub created_at: DateTimeUtc,
    pub updated_at: DateTimeUtc,
}
#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::r#match::Entity")]
    Match,
    #[sea_orm(has_many = "super::tournament_player::Entity")]
    TournamentPlayer,
}
impl Related<super::r#match::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Match.def()
    }
}
impl Related<super::tournament_player::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::TournamentPlayer.def()
    }
}
impl ActiveModelBehavior for ActiveModel {}
